import React, { useState, useEffect } from 'react';
import Card from '../ui/Card';
import Button from '../ui/Button';
import { 
  PsychologicalEvaluation, 
  EvaluationStatus,
  ValidationRules,
  UpdateEvaluationRequest
} from '../../types/evaluation';

interface PsychologicalInterviewFormProps {
  evaluation: PsychologicalEvaluation;
  onSave: (data: UpdateEvaluationRequest) => Promise<void>;
  onCancel: () => void;
  isReadOnly?: boolean;
  isLoading?: boolean;
}

const PsychologicalInterviewForm: React.FC<PsychologicalInterviewFormProps> = ({
  evaluation,
  onSave,
  onCancel,
  isReadOnly = false,
  isLoading = false
}) => {
  const [formData, setFormData] = useState<UpdateEvaluationRequest>({
    observations: evaluation.observations || '',
    strengths: evaluation.strengths || '',
    areasForImprovement: evaluation.areasForImprovement || '',
    recommendations: evaluation.recommendations || '',
    socialSkillsAssessment: evaluation.socialSkillsAssessment || '',
    emotionalMaturity: evaluation.emotionalMaturity || '',
    motivationAssessment: evaluation.motivationAssessment || '',
    familySupportAssessment: evaluation.familySupportAssessment || '',
    status: evaluation.status
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isDirty, setIsDirty] = useState(false);

  useEffect(() => {
    setFormData({
      observations: evaluation.observations || '',
      strengths: evaluation.strengths || '',
      areasForImprovement: evaluation.areasForImprovement || '',
      recommendations: evaluation.recommendations || '',
      socialSkillsAssessment: evaluation.socialSkillsAssessment || '',
      emotionalMaturity: evaluation.emotionalMaturity || '',
      motivationAssessment: evaluation.motivationAssessment || '',
      familySupportAssessment: evaluation.familySupportAssessment || '',
      status: evaluation.status
    });
  }, [evaluation]);

  const handleFieldChange = (field: keyof UpdateEvaluationRequest, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setIsDirty(true);
    
    // Clear error for this field when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    // Required fields validation
    const requiredFields = [
      { field: 'observations', label: 'Observaciones generales' },
      { field: 'socialSkillsAssessment', label: 'Evaluaci√≥n de habilidades sociales' },
      { field: 'emotionalMaturity', label: 'Madurez emocional' },
      { field: 'motivationAssessment', label: 'Evaluaci√≥n de motivaci√≥n' },
      { field: 'familySupportAssessment', label: 'Evaluaci√≥n del apoyo familiar' },
      { field: 'strengths', label: 'Fortalezas identificadas' },
      { field: 'areasForImprovement', label: '√Åreas de mejora' },
      { field: 'recommendations', label: 'Recomendaciones' }
    ] as const;

    requiredFields.forEach(({ field, label }) => {
      const value = formData[field] as string;
      if (!ValidationRules.requiredText(value || '')) {
        newErrors[field] = `${label} es requerido`;
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) return;

    const updateData: UpdateEvaluationRequest = {
      ...formData,
      status: EvaluationStatus.COMPLETED,
      completionDate: new Date().toISOString()
    };

    try {
      await onSave(updateData);
      setIsDirty(false);
    } catch (error) {
      console.error('Error saving evaluation:', error);
    }
  };

  const handleSaveAsDraft = async () => {
    const updateData: UpdateEvaluationRequest = {
      ...formData,
      status: EvaluationStatus.IN_PROGRESS
    };

    try {
      await onSave(updateData);
      setIsDirty(false);
    } catch (error) {
      console.error('Error saving draft:', error);
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <Card className="p-6">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-2xl font-bold text-azul-monte-tabor">
              üß† Entrevista Psicol√≥gica
            </h2>
            <p className="text-gris-piedra mt-1">
              Estudiante: {evaluation.application?.student.firstName} {evaluation.application?.student.lastName}
            </p>
            <p className="text-sm text-gris-piedra">
              Grado: {evaluation.application?.student.gradeApplied} | RUT: {evaluation.application?.student.rut}
            </p>
          </div>
          <div className="text-right">
            <p className="text-sm text-gris-piedra">Evaluador:</p>
            <p className="font-medium">
              {evaluation.evaluator?.firstName} {evaluation.evaluator?.lastName}
            </p>
          </div>
        </div>
      </Card>

      {/* Guidelines */}
      <Card className="p-6 bg-blue-50 border-blue-200">
        <h4 className="font-semibold text-blue-800 mb-3">üìã Gu√≠a para la Evaluaci√≥n Psicol√≥gica</h4>
        <div className="text-sm text-blue-700 space-y-1">
          <p>‚Ä¢ Observe el comportamiento del estudiante durante la entrevista</p>
          <p>‚Ä¢ Eval√∫e la capacidad de comunicaci√≥n y expresi√≥n emocional</p>
          <p>‚Ä¢ Considere la madurez apropiada para la edad</p>
          <p>‚Ä¢ Analice la motivaci√≥n para el aprendizaje y la integraci√≥n social</p>
          <p>‚Ä¢ Identifique el nivel de apoyo familiar percibido</p>
        </div>
      </Card>

      {/* Observaciones Generales */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">üëÅÔ∏è Observaciones Generales</h3>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Impresi√≥n general y comportamiento durante la entrevista *
          </label>
          <textarea
            value={formData.observations || ''}
            onChange={(e) => handleFieldChange('observations', e.target.value)}
            disabled={isReadOnly}
            rows={4}
            className={`w-full border rounded-md px-3 py-2 ${
              errors.observations ? 'border-red-500' : 'border-gray-300'
            } ${isReadOnly ? 'bg-gray-100' : ''}`}
            placeholder="Describe el comportamiento general, actitud, nivel de cooperaci√≥n, comunicaci√≥n verbal y no verbal..."
          />
          {errors.observations && (
            <p className="text-red-500 text-sm mt-1">{errors.observations}</p>
          )}
        </div>
      </Card>

      {/* Evaluaci√≥n Psicol√≥gica Espec√≠fica */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">üß† Evaluaci√≥n Psicol√≥gica Espec√≠fica</h3>
        
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ü§ù Habilidades Sociales y Comunicaci√≥n *
            </label>
            <textarea
              value={formData.socialSkillsAssessment || ''}
              onChange={(e) => handleFieldChange('socialSkillsAssessment', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.socialSkillsAssessment ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Eval√∫a la capacidad de interacci√≥n social, expresi√≥n de ideas, escucha activa, empat√≠a..."
            />
            {errors.socialSkillsAssessment && (
              <p className="text-red-500 text-sm mt-1">{errors.socialSkillsAssessment}</p>
            )}
            <p className="text-xs text-gray-500 mt-1">
              Considera: contacto visual, expresi√≥n verbal, capacidad de di√°logo, respeto por turnos...
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üí≠ Madurez Emocional *
            </label>
            <textarea
              value={formData.emotionalMaturity || ''}
              onChange={(e) => handleFieldChange('emotionalMaturity', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.emotionalMaturity ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Describe el nivel de madurez emocional apropiado para la edad, autorregulaci√≥n, manejo de emociones..."
            />
            {errors.emotionalMaturity && (
              <p className="text-red-500 text-sm mt-1">{errors.emotionalMaturity}</p>
            )}
            <p className="text-xs text-gray-500 mt-1">
              Eval√∫a: autocontrol, expresi√≥n emocional apropiada, tolerancia a la frustraci√≥n...
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üéØ Motivaci√≥n y Actitud hacia el Aprendizaje *
            </label>
            <textarea
              value={formData.motivationAssessment || ''}
              onChange={(e) => handleFieldChange('motivationAssessment', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.motivationAssessment ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Eval√∫a el inter√©s por aprender, curiosidad, disposici√≥n a enfrentar desaf√≠os acad√©micos..."
            />
            {errors.motivationAssessment && (
              <p className="text-red-500 text-sm mt-1">{errors.motivationAssessment}</p>
            )}
            <p className="text-xs text-gray-500 mt-1">
              Considera: entusiasmo, perseverancia, actitud hacia las tareas, metas personales...
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Evaluaci√≥n del Apoyo Familiar *
            </label>
            <textarea
              value={formData.familySupportAssessment || ''}
              onChange={(e) => handleFieldChange('familySupportAssessment', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.familySupportAssessment ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Describe la percepci√≥n del estudiante sobre el apoyo familiar, estructura familiar, expectativas..."
            />
            {errors.familySupportAssessment && (
              <p className="text-red-500 text-sm mt-1">{errors.familySupportAssessment}</p>
            )}
            <p className="text-xs text-gray-500 mt-1">
              Eval√∫a: comunicaci√≥n familiar, apoyo acad√©mico, estabilidad del entorno familiar...
            </p>
          </div>
        </div>
      </Card>

      {/* An√°lisis y Recomendaciones */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">üí° An√°lisis y Recomendaciones</h3>
        
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‚úÖ Fortalezas Psicol√≥gicas Identificadas *
            </label>
            <textarea
              value={formData.strengths || ''}
              onChange={(e) => handleFieldChange('strengths', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.strengths ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Identifica las principales fortalezas emocionales, sociales y cognitivas del estudiante..."
            />
            {errors.strengths && (
              <p className="text-red-500 text-sm mt-1">{errors.strengths}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üéØ √Åreas de Desarrollo *
            </label>
            <textarea
              value={formData.areasForImprovement || ''}
              onChange={(e) => handleFieldChange('areasForImprovement', e.target.value)}
              disabled={isReadOnly}
              rows={3}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.areasForImprovement ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Se√±ala aspectos emocionales o sociales que podr√≠an beneficiarse de apoyo adicional..."
            />
            {errors.areasForImprovement && (
              <p className="text-red-500 text-sm mt-1">{errors.areasForImprovement}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              üìã Recomendaciones Psicopedag√≥gicas *
            </label>
            <textarea
              value={formData.recommendations || ''}
              onChange={(e) => handleFieldChange('recommendations', e.target.value)}
              disabled={isReadOnly}
              rows={4}
              className={`w-full border rounded-md px-3 py-2 ${
                errors.recommendations ? 'border-red-500' : 'border-gray-300'
              } ${isReadOnly ? 'bg-gray-100' : ''}`}
              placeholder="Proporciona recomendaciones espec√≠ficas para el apoyo psicol√≥gico y la integraci√≥n escolar..."
            />
            {errors.recommendations && (
              <p className="text-red-500 text-sm mt-1">{errors.recommendations}</p>
            )}
            <p className="text-xs text-gray-500 mt-1">
              Incluye estrategias de apoyo emocional, recomendaciones para padres y profesores...
            </p>
          </div>
        </div>
      </Card>

      {/* Criterios de Evaluaci√≥n */}
      <Card className="p-6 bg-gray-50">
        <h4 className="font-semibold text-azul-monte-tabor mb-4">üìä Criterios de Evaluaci√≥n Psicol√≥gica</h4>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Desarrollo Emocional:</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Autoconciencia emocional</li>
              <li>‚Ä¢ Regulaci√≥n emocional</li>
              <li>‚Ä¢ Expresi√≥n apropiada de emociones</li>
              <li>‚Ä¢ Resiliencia y adaptabilidad</li>
            </ul>
          </div>
          
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Habilidades Sociales:</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Comunicaci√≥n efectiva</li>
              <li>‚Ä¢ Empat√≠a y comprensi√≥n social</li>
              <li>‚Ä¢ Habilidades de colaboraci√≥n</li>
              <li>‚Ä¢ Resoluci√≥n de conflictos</li>
            </ul>
          </div>
          
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Motivaci√≥n y Actitud:</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Inter√©s por el aprendizaje</li>
              <li>‚Ä¢ Perseverancia ante dificultades</li>
              <li>‚Ä¢ Autonom√≠a y autorregulaci√≥n</li>
              <li>‚Ä¢ Actitud positiva hacia la escuela</li>
            </ul>
          </div>
          
          <div>
            <h5 className="font-medium text-gray-700 mb-2">Contexto Familiar:</h5>
            <ul className="text-gray-600 space-y-1">
              <li>‚Ä¢ Apoyo familiar percibido</li>
              <li>‚Ä¢ Comunicaci√≥n familiar</li>
              <li>‚Ä¢ Estabilidad del entorno</li>
              <li>‚Ä¢ Expectativas familiares</li>
            </ul>
          </div>
        </div>
      </Card>

      {/* Action Buttons */}
      {!isReadOnly && (
        <Card className="p-6">
          <div className="flex justify-between items-center">
            <div className="text-sm text-gris-piedra">
              {isDirty && "* Hay cambios sin guardar"}
            </div>
            <div className="flex space-x-3">
              <Button
                variant="outline"
                onClick={onCancel}
                disabled={isLoading}
              >
                Cancelar
              </Button>
              <Button
                variant="outline"
                onClick={handleSaveAsDraft}
                disabled={isLoading}
              >
                üíæ Guardar Borrador
              </Button>
              <Button
                variant="primary"
                onClick={handleSave}
                disabled={isLoading}
              >
                {isLoading ? 'Guardando...' : '‚úÖ Completar Entrevista'}
              </Button>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};

export default PsychologicalInterviewForm;