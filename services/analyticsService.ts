import api from './api';

export interface DashboardMetrics {
  totalApplications: number;
  applicationsThisMonth: number;
  conversionRate: number;
  acceptedApplications: number;
  averageCompletionDays: number;
  activeEvaluators: number;
  totalActiveUsers: number;
}

export interface StatusDistribution {
  statusCount: Record<string, number>;
  statusPercentages: Record<string, number>;
  totalApplications: number;
}

export interface GradeDistribution {
  gradeCount: Record<string, number>;
  gradePercentages: Record<string, number>;
  totalApplications: number;
}

export interface EvaluatorAnalysis {
  teacherLanguage: number;
  teacherMathematics: number;
  teacherEnglish: number;
  psychologist: number;
  cycleDirector: number;
  admin: number;
  totalEvaluators: number;
  evaluatorsByRole: Record<string, number>;
}

export interface TemporalTrends {
  monthlyApplications: Record<string, number>;
  currentMonthApplications: number;
  lastMonthApplications: number;
  monthlyGrowthRate: number;
}

export interface PerformanceMetrics {
  completionRate: number;
  underReviewRate: number;
  finalizationRate: number;
  completedApplications: number;
  underReviewApplications: number;
  finalizedApplications: number;
}

export interface InsightRecommendation {
  type: string;
  title: string;
  message: string;
  level: 'success' | 'warning' | 'info' | 'error';
}

export interface Insights {
  recommendations: InsightRecommendation[];
  totalInsights: number;
}

export interface CompleteAnalytics {
  dashboardMetrics: DashboardMetrics;
  statusDistribution: StatusDistribution;
  gradeDistribution: GradeDistribution;
  evaluatorAnalysis: EvaluatorAnalysis;
  temporalTrends: TemporalTrends;
  performanceMetrics: PerformanceMetrics;
  insights: Insights;
  generatedAt: string;
}

class AnalyticsService {
  
  /**
   * Obtener m√©tricas principales del dashboard
   */
  async getDashboardMetrics(): Promise<DashboardMetrics> {
    try {
      console.log('üìä Obteniendo m√©tricas del dashboard...');
      const response = await api.get('/api/analytics/dashboard-metrics');
      console.log('‚úÖ M√©tricas del dashboard obtenidas:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo m√©tricas del dashboard:', error);
      throw new Error('Error al obtener m√©tricas del dashboard: ' + error.message);
    }
  }

  /**
   * Obtener distribuci√≥n por estado de postulaciones
   */
  async getStatusDistribution(): Promise<StatusDistribution> {
    try {
      console.log('üìà Obteniendo distribuci√≥n por estado...');
      const response = await api.get('/api/analytics/status-distribution');
      console.log('‚úÖ Distribuci√≥n por estado obtenida:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo distribuci√≥n por estado:', error);
      throw new Error('Error al obtener distribuci√≥n por estado: ' + error.message);
    }
  }

  /**
   * Obtener distribuci√≥n por grado acad√©mico
   */
  async getGradeDistribution(): Promise<GradeDistribution> {
    try {
      console.log('üìö Obteniendo distribuci√≥n por grado...');
      const response = await api.get('/api/analytics/grade-distribution');
      console.log('‚úÖ Distribuci√≥n por grado obtenida:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo distribuci√≥n por grado:', error);
      throw new Error('Error al obtener distribuci√≥n por grado: ' + error.message);
    }
  }

  /**
   * Obtener an√°lisis de evaluadores
   */
  async getEvaluatorAnalysis(): Promise<EvaluatorAnalysis> {
    try {
      console.log('üë• Obteniendo an√°lisis de evaluadores...');
      const response = await api.get('/api/analytics/evaluator-analysis');
      console.log('‚úÖ An√°lisis de evaluadores obtenido:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo an√°lisis de evaluadores:', error);
      throw new Error('Error al obtener an√°lisis de evaluadores: ' + error.message);
    }
  }

  /**
   * Obtener tendencias temporales
   */
  async getTemporalTrends(): Promise<TemporalTrends> {
    try {
      console.log('üìÖ Obteniendo tendencias temporales...');
      const response = await api.get('/api/analytics/temporal-trends');
      console.log('‚úÖ Tendencias temporales obtenidas:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo tendencias temporales:', error);
      throw new Error('Error al obtener tendencias temporales: ' + error.message);
    }
  }

  /**
   * Obtener m√©tricas de rendimiento del proceso
   */
  async getPerformanceMetrics(): Promise<PerformanceMetrics> {
    try {
      console.log('‚ö° Obteniendo m√©tricas de rendimiento...');
      const response = await api.get('/api/analytics/performance-metrics');
      console.log('‚úÖ M√©tricas de rendimiento obtenidas:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo m√©tricas de rendimiento:', error);
      throw new Error('Error al obtener m√©tricas de rendimiento: ' + error.message);
    }
  }

  /**
   * Obtener insights y recomendaciones
   */
  async getInsights(): Promise<Insights> {
    try {
      console.log('üí° Obteniendo insights y recomendaciones...');
      const response = await api.get('/api/analytics/insights');
      console.log('‚úÖ Insights obtenidos:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo insights:', error);
      throw new Error('Error al obtener insights: ' + error.message);
    }
  }

  /**
   * Obtener todas las m√©tricas de an√°lisis en una sola llamada
   */
  async getCompleteAnalytics(): Promise<CompleteAnalytics> {
    try {
      console.log('üéØ Obteniendo an√°lisis completo...');
      const response = await api.get('/api/analytics/complete-analytics');
      console.log('‚úÖ An√°lisis completo obtenido:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Error obteniendo an√°lisis completo:', error);
      throw new Error('Error al obtener an√°lisis completo: ' + error.message);
    }
  }

  /**
   * Obtener todas las m√©tricas individualmente y combinar (fallback)
   */
  async getAllAnalyticsSeparately(): Promise<CompleteAnalytics> {
    try {
      console.log('üîÑ Obteniendo an√°lisis por partes...');
      
      const [
        dashboardMetrics,
        statusDistribution,
        gradeDistribution,
        evaluatorAnalysis,
        temporalTrends,
        performanceMetrics,
        insights
      ] = await Promise.all([
        this.getDashboardMetrics(),
        this.getStatusDistribution(),
        this.getGradeDistribution(),
        this.getEvaluatorAnalysis(),
        this.getTemporalTrends(),
        this.getPerformanceMetrics(),
        this.getInsights()
      ]);

      const completeAnalytics: CompleteAnalytics = {
        dashboardMetrics,
        statusDistribution,
        gradeDistribution,
        evaluatorAnalysis,
        temporalTrends,
        performanceMetrics,
        insights,
        generatedAt: new Date().toISOString()
      };

      console.log('‚úÖ An√°lisis combinado exitosamente');
      return completeAnalytics;
      
    } catch (error: any) {
      console.error('‚ùå Error obteniendo an√°lisis por partes:', error);
      throw new Error('Error al obtener an√°lisis: ' + error.message);
    }
  }

  /**
   * Verificar conectividad con el backend
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('üîç Verificando conectividad con analytics API...');
      const response = await api.get('/api/analytics/dashboard-metrics');
      console.log('‚úÖ Conectividad verificada');
      return true;
    } catch (error: any) {
      console.error('‚ùå Error de conectividad:', error);
      return false;
    }
  }
}

export const analyticsService = new AnalyticsService();